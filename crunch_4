#!/usr/bin/python3
# -*- coding: utf-8 -*-

# Copyright © 2013 Martin Ueding <dev@martin-ueding.de>
# Licensed under The GNU Public License Version 2 (or later)

import jinja2
import math
import matplotlib.pyplot as pl
import numpy as np
import scipy.optimize as op

def a4_1_1_spannungsverstaerkung(T):
    data = np.genfromtxt("4-1-1-Spannungsverstaerkung.txt")

    RE = data[:,0]
    RC = data[:,1]
    dUB = data[:,2]
    dUE = data[:,3]

    v = dUE / dUB

    T["table411"] = np.column_stack([RE, RC, dUB, dUE, np.round(v, 3)])

    RE = data[:, 0]
    RC = data[:, 1]
    dUB = data[:, 2]
    dUE = data[:, 3]

    v = dUE / dUB

    T["table411"] = np.column_stack([RE, RC, dUB, dUE, np.round(v, 3)])

def a4_1_2_spannungsverstaerkung(T):
    data = np.genfromtxt("4-1-2-Spannungsverstaerkung.txt")

    RE = data[:, 0]
    RC = data[:, 1]
    dUB = data[:, 2]
    dUC = data[:, 3]

    v = dUC / dUB
    v_approx = - RC / RE

    ew_dUB = .015
    ew_dUC = -2.2
    v0 = ew_dUC / ew_dUB

    x = (1/RC * RE)[5:]
    y = (1/v)[5:]

    popt, pconv = op.curve_fit(linear, x, y)

    fit_x = np.linspace(np.min(x), np.max(x), 10)
    fit_y = linear(fit_x, *popt)

    steigung_val = popt[0]
    steigung_err = np.sqrt(pconv.diagonal())[0]
    abschnitt_val = popt[1]
    abschnitt_err = np.sqrt(pconv.diagonal())[1]

    v0_abschnitt = 1 / abschnitt_val
    v0_abschnitt_err = abschnitt_err / abschnitt_val **2

    print("Steigung", steigung_val, steigung_err)
    print("Achsenabschnitt", abschnitt_val, abschnitt_err)

    T["steigung"] = g(steigung_val, steigung_err)
    T["achsenabschnitt"] = g(abschnitt_val, abschnitt_err)
    T["v0_abschnitt"] = g(v0_abschnitt, v0_abschnitt_err)

    pl.plot(x, y, linestyle="none", marker="o")
    pl.plot(fit_x, fit_y)
    pl.xlabel(r"$R_\mathrm{E}/R_\mathrm{C}$")
    pl.ylabel(r"$\frac{1}{v}(R_\mathrm{E})$")
    pl.grid(True)
    pl.savefig("vRE.pdf")
    pl.clf()

    pl.plot(RC[:5], v[:5], linestyle="none", marker="o")
    pl.xlabel(r"$R_\mathrm{C}$")
    pl.ylabel(r"$v(R_\mathrm{C})$")
    pl.grid(True)
    pl.savefig("vRC.pdf")
    pl.clf()

    T["ew_dUB"] = ew_dUB
    T["ew_dUC"] = ew_dUC
    T["ew_v0"] = g(v0)
    T["table412"] = np.column_stack([RE, RC, dUB, dUC, np.round(v, 3), np.round(v_approx, 3)])

def a4_1_3(T):
    data = np.genfromtxt("4-1-3-Spannungsverstarkung.txt")

    f = data[:, 0]
    dUB = data[:, 1]
    dUE = data[:, 2]
    v = dUE / dUB

    T["table413"] = np.column_stack([f, dUB, dUE, np.round(v, 3)])

def a4_1_4(T):
    data = np.genfromtxt("4-1-4-normal.txt")

    f = data[:, 0]
    dUB = data[:, 1]
    dUE = data[:, 2]

    v = np.abs(dUE/dUB) * 100

    pl.loglog(f, v, linestyle="none", marker="o", label="ohne Kaskode")


    x = np.linspace(np.min(f), np.max(f))
    db0_y = np.ones(x.shape) * v[0]
    pl.loglog(x, db0_y, label=r"$0 \, \mathrm{dB}$-Linie")

    db3_y = np.ones(x.shape) * v[0] / np.sqrt(2)
    pl.loglog(x, db3_y, label=r"$-3 \, \mathrm{dB}$-Linie")

    transit_y = np.ones(x.shape)
    pl.loglog(x, transit_y, label="$v = 1$")

    T["table414normal"] = np.column_stack([f, dUB, dUE, np.round(v, 3)])

    data = np.genfromtxt("4-1-4-Kaskode.txt")

    f = data[:, 0]
    dUB = data[:, 1]
    dUE = data[:, 2]

    v = np.abs(dUE/dUB) * 100

    pl.loglog(f, v, linestyle="none", marker="o", label="mit Kaskode")
    pl.xlabel(r"Frequenz $f / \mathrm{Hz}$")
    pl.ylabel(r"Wechselspannungsverstärkung $v$")
    pl.grid(True)
    pl.legend(loc="lower left")
    pl.savefig("4-1-4-Plot.pdf")
    pl.clf()

    T["table414Kaskode"] = np.column_stack([f, dUB, dUE, np.round(v, 3)])

def linear(x, a, b):
    return a*x + b

def exponential(x, a, b):
    return a* (x**b)

def g(value, error=None, digits=3):
    if error is None:
        return ("{:."+str(digits)+"g}").format(value)
    else:
        value_log = int(math.floor(math.log(np.abs(value), 10)))
        error_log = int(math.floor(math.log(np.abs(error), 10)))

        difference = value_log - error_log
        exp = 0

        if difference >= 0:
            value_dis = value * 10**(difference - value_log)
            error_dis = error * 10**(- error_log)
            exp = error_log
        else:
            value_dis = value * 10**(- value_log)
            error_dis = error * 10**(difference - error_log)
            exp = value_log

        format_string = "{:."+str(digits-1)+"f} +- {:."+str(digits-1)+"f} e{:+d}"
        return format_string.format(value_dis, error_dis, exp)

def render_template(T):
    # Setting up Jinja
    env = jinja2.Environment(
        "%<", ">%",
        "<<", ">>",
        "%§", "§%",
        loader=jinja2.FileSystemLoader(".")
    )
    template4 = env.get_template("Template_4.tex")

    # Rendering LaTeX document with values.
    with open("physik313-4-Ueding_Lemmer.tex", "w") as f:
        f.write(template4.render(**T))

def main():
    T = {}

    a4_1_1_spannungsverstaerkung(T)
    a4_1_2_spannungsverstaerkung(T)
    a4_1_3(T)
    a4_1_4(T)
    render_template(T)

if __name__ == "__main__":
    main()

# vim: et
