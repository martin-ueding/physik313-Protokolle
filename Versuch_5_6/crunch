#!/usr/bin/python3
# -*- coding: utf-8 -*-

# Copyright © 2013 Martin Ueding <dev@martin-ueding.de>
# Licensed under The GNU Public License Version 2 (or later)

import jinja2
import math
import matplotlib.pyplot as pl
import numpy as np
import scipy.optimize as op
import scipy.interpolate

def skizze_d(T):
    f = np.linspace(1, 1e4, 1e4)
    v = np.sqrt(1 + 4 * np.pi**2 * 100e3**2 * 100e-9**2 * f**2)

    pl.loglog(f, v)
    pl.xlabel(r"$f/ \mathrm{Hz}$")
    pl.ylabel(r"$v$")
    pl.grid(True)
    pl.savefig("_build/5_6-D.pdf", bbox_inches='tight')
    pl.clf()

def verstaerker_part(T, filename, color, label, table_key, f_T_key, f_grenz_key):
    # Daten einlesen.
    data = np.genfromtxt(filename)
    data = data[data[:,0].argsort()]

    # Daten mappen.
    f = data[:, 0]
    uin = data[:, 1]
    uout = data[:, 2]

    # Weitere Daten ausrechnen.
    v = uout/uin

    # Messwerte plotten.
    pl.loglog(f, v, label=label, linestyle="none", marker="o", color=color)

    # Messwerte interpolieren.
    inter = scipy.interpolate.interp1d(f, v, kind='linear')
    x = np.logspace(np.log(np.min(f)), np.log(np.max(f)), 100, base=np.e)
    x = [xx for xx in x if np.min(f) <= xx <= np.max(f)]
    y = inter(x)
    pl.loglog(x, y, color=color)

    # Transitfrequenz bestimmen.
    f_T = scipy.optimize.brentq(lambda x: inter(x) - 1, np.min(f), np.max(f))
    pl.loglog(f_T, inter(f_T), linestyle="none", marker="d", color=color,
              markersize=10)

    # Grenzfrequenz bestimmen.
    def grenz(x):
        return inter(x) - np.max(v) / np.sqrt(2)
    a = np.min(x)
    b = np.max(x)
    while np.sign(grenz(a)) == np.sign(grenz(b)) and len(x) > 2:
        x = x[1:]
        a = np.min(x)
        b = np.max(x)
    f_grenz = scipy.optimize.brentq(grenz, a, b)
    pl.loglog(f_grenz , inter(f_grenz ), linestyle="none", marker="*", color=color, markersize=15)

    # Daten exporieren.
    T[f_grenz_key] = g(f_grenz)
    T[f_T_key] = g(f_T)
    T[table_key] = np.column_stack([f, uin, uout, np.round(v, 3)])

def verstaerker(T):
    verstaerker_part(T, "Verstaerker-11.txt", "red", "$V = 11$",
                     "table_verstaerker_11", "f_T_11", "f_grenz_11")
    verstaerker_part(T, "Verstaerker-101.txt", "green", "$V = 101$",
                     "table_verstaerker_101", "f_T_101", "f_grenz_101")
    verstaerker_part(T, "Verstaerker-2.txt", "blue", "$V = 2$",
                     "table_verstaerker_2", "f_T_2", "f_grenz_2")
    verstaerker_part(T, "Verstaerker-Kondensator.txt", "purple",
                     "$V = 11$, Kondensator", "table_verstaerker_c", "f_T_c",
                     "f_grenz_c")

    pl.xlabel(r"$f / \mathrm{Hz}$")
    pl.ylabel(r"$v$")
    pl.grid(True)
    pl.legend(loc="best")
    pl.savefig("_build/Plot-Verstaerker.pdf", bbox_inches='tight')
    pl.clf()

def addierer(T):
    x = np.linspace(0, 2*np.pi, 1000)

    y1 = np.sin(x)
    y2 = 1/2 * np.sin(2*x)
    y3 = 1/3 * np.sin(3*x)

    y = 2 / np.pi * (y1 + y2 + y3)

    pl.plot(x, y1, label=r"$\sin(x)$")
    pl.plot(x, y2, label=r"$\sin(2x)$")
    pl.plot(x, y3, label=r"$\sin(3x)$")
    pl.plot(x, y, label="Summe", linewidth=3, color="black")
    pl.xlabel("$x$")
    pl.ylabel("$f(t)$")
    pl.grid(True)
    pl.legend(loc="best")
    pl.savefig("_build/Plot-Saegezahn.pdf", bbox_inches='tight')
    pl.clf()

def frequenzgang(T):
    data = np.genfromtxt("Frequenzgang.txt")

    u = data[:, 0]
    div = data[:, 1]
    t_raw = data[:, 2]
    t = div * t_raw
    f = 1/t

    pl.loglog(u, f, linestyle="none", marker="o")
    pl.xlabel(r"$U_{\mathrm{in}} / \mathrm{V}$")
    pl.ylabel(r"$f / \mathrm{Hz}$")
    pl.grid(True)
    pl.savefig("_build/Plot-Frequenzgang.pdf", bbox_inches='tight')
    pl.clf()

    T["table_sinus"] = np.column_stack([u, div, t_raw, np.round(t*1000, 3), np.round(f, 3)])

def g(value, error=None, digits=3):
    if error is None:
        return ("{:."+str(digits)+"g}").format(value)
    else:
        value_log = int(math.floor(math.log(np.abs(value), 10)))
        error_log = int(math.floor(math.log(np.abs(error), 10)))

        difference = value_log - error_log
        exp = 0

        if difference >= 0:
            value_dis = value * 10**(difference - value_log)
            error_dis = error * 10**(- error_log)
            exp = error_log
        else:
            value_dis = value * 10**(- value_log)
            error_dis = error * 10**(difference - error_log)
            exp = value_log

        format_string = "{:."+str(digits-1)+"f} +- {:."+str(digits-1)+"f} e{:+d}"
        return format_string.format(value_dis, error_dis, exp)

def render_template(T):
    # Setting up Jinja
    env = jinja2.Environment(
        "%<", ">%",
        "<<", ">>",
        "%§", "§%",
        loader=jinja2.FileSystemLoader(".")
    )
    template = env.get_template("Template.tex")

    # Rendering LaTeX document with values.
    with open("_build/physik313-5_6-Ueding_Lemmer.tex", "w") as f:
        f.write(template.render(**T))

def main():
    T = {}

    print("Skizze D …")
    skizze_d(T)

    print("5: Verstärker …")
    verstaerker(T)

    print("5: Addierer …")
    addierer(T)

    print("6: Frequenzgang …")
    frequenzgang(T)

    print("Fertig.")

    render_template(T)

if __name__ == "__main__":
    main()
