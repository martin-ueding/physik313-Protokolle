#!/usr/bin/python3
# -*- coding: utf-8 -*-

# Copyright © 2013 Martin Ueding <dev@martin-ueding.de>
# Licensed under The GNU Public License Version 2 (or later)

import jinja2
import math
import matplotlib.pyplot as pl
import numpy as np
import scipy.optimize as op

def aufgabe_1(T):
    data = np.genfromtxt("Daten_D1.txt")
    data = data[data[:,0].argsort()]
    U = data[:, 0]
    I_1 = data[:, 1]
    I_2 = data[:, 2]

    pl.plot(U, I_1, label="Messung 1", marker="o")
    pl.plot(U, I_2, label="Messung 2", marker="o")
    pl.xlabel(r"$U / \mathrm{V}$")
    pl.ylabel(r"$I / \mathrm{mA}$")
    pl.grid(True)
    pl.legend(loc="best")
    pl.savefig("Daten_D1.pdf")
    pl.clf()

    T["a1_D1"] = list(zip(U, I_1, I_2))

    data = np.genfromtxt("Daten_D2.txt")
    data = data[data[:,0].argsort()]
    U = data[:, 0]
    I = data[:, 1]

    pl.plot(U, I, marker="o")
    pl.xlabel(r"$U / \mathrm{V}$")
    pl.ylabel(r"$I / \mathrm{mA}$")
    pl.grid(True)
    pl.savefig("Daten_D2.pdf")
    pl.clf()

    T["a1_D2"] = list(zip(U, I))

def aufgabe_5(T):
    data_5 = np.genfromtxt("Daten_5.txt")
    data_5 = data_5[data_5[:,0].argsort()]
    data_5_ZD = np.genfromtxt("Daten_5_ZD.txt")
    data_5_ZD = data_5_ZD[data_5_ZD[:,0].argsort()]
    U_5 = data_5[:, 0]
    I_5 = data_5[:, 1]
    U_5_ZD = data_5_ZD[:, 0]
    I_5_ZD = data_5_ZD[:, 1]

    pl.plot(U_5, I_5, marker="o", label="ohne Stabilisierung")
    pl.plot(U_5_ZD, I_5_ZD, marker="o", label="mit Stabilisierung")
    pl.xlabel(r"$U / \mathrm{V}$")
    pl.ylabel(r"$I / \mathrm{mA}$")
    pl.legend(loc="best")
    pl.grid(True)
    pl.savefig("Daten_5.pdf")
    pl.clf()

    T["a5_table"] = list(zip(U_5, I_5, np.round(U_5/I_5, 3)))
    T["a5_ZD_table"] = list(zip(U_5_ZD, I_5_ZD, np.round(U_5_ZD/I_5_ZD, 3)))

def g(value, error=None, digits=3):
    if error is None:
        return ("{:."+str(digits)+"g}").format(value)
    else:
        value_log = int(math.floor(math.log(np.abs(value), 10)))
        error_log = int(math.floor(math.log(np.abs(error), 10)))

        difference = value_log - error_log
        exp = 0

        if difference >= 0:
            value_dis = value * 10**(difference - value_log)
            error_dis = error * 10**(- error_log)
            exp = error_log
        else:
            value_dis = value * 10**(- value_log)
            error_dis = error * 10**(difference - error_log)
            exp = value_log

        format_string = "{:."+str(digits-1)+"f} +- {:."+str(digits-1)+"f} e{:+d}"
        return format_string.format(value_dis, error_dis, exp)

def render_template(T):
    # Setting up Jinja
    env = jinja2.Environment(
        "%<", ">%",
        "<<", ">>",
        "%§", "§%",
        loader=jinja2.FileSystemLoader(".")
    )
    template = env.get_template("Template.tex")

    # Rendering LaTeX document with values.
    with open("physik313-2-Ueding_Lemmer.tex", "w") as f:
        f.write(template.render(**T))

def main():
    T = {}

    aufgabe_1(T)
    aufgabe_5(T)

    render_template(T)

if __name__ == "__main__":
    main()
