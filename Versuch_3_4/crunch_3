#!/usr/bin/python3
# -*- coding: utf-8 -*-

# Copyright © 2013 Martin Ueding <dev@martin-ueding.de>
# Licensed under The GNU Public License Version 2 (or later)

import jinja2
import math
import matplotlib.pyplot as pl
import numpy as np
import scipy.optimize as op

def subsection1(T):
    dIC_val = .6 * 2.e-3 # A
    dIC_err = .1 * 2.e-3 # A

    dIB_val = 6.e-6 # A

    beta_val = dIC_val / dIB_val
    beta_err = dIC_err / dIB_val

    T['dIC'] = g(dIC_val, dIC_err)
    T['dIB'] = g(dIB_val)
    T['beta'] = g(beta_val, beta_err)

    data = np.genfromtxt("Transkonduktanz.txt")

    R = 200e3

    RC = 500

    UG = data[:, 0] * dIB_val * R
    ID = data[:, 1] / RC

    def fit(UG, k, Uthr):
        return k * (UG - Uthr)**2

    popt, pconv = op.curve_fit(fit, UG, ID)

    x = np.linspace(np.min(UG), np.max(UG), 100)
    y = fit(x, *popt)

    p_err = np.sqrt(pconv.diagonal())

    T["k"] = g(popt[0], p_err[0])
    T["Uthr"] = g(popt[1], p_err[1])
    T["k"] = g(popt[0])
    T["Uthr"] = g(popt[1])

    pl.plot(UG, ID, linestyle="none", marker="o")
    pl.plot(x, y)
    pl.xlabel(r"Gatespannung $U_{\mathrm{G}} / \mathrm{V}$")
    pl.ylabel(r"Drainstrom $I_{\mathrm{D}} / \mathrm{A}$")
    pl.grid(True)
    pl.savefig("ID_UG.pdf")
    pl.clf()

    pl.plot(UG, np.sqrt(ID), linestyle="none", marker="o")
    pl.xlabel(r"Gatespannung $U_{\mathrm{G}} / \mathrm{V}$")
    pl.ylabel(r"Drainstrom $\sqrt{I_{\mathrm{D}} / \mathrm{A}}$")
    pl.grid(True)
    pl.savefig("ID_UG_sqrt.pdf")
    pl.clf()

    T["trans_raw"] = data
    T["trans"] = np.column_stack([UG, ID])
    T["R"] = g(R)

def subsection2(T):
    U_E = 1234 # V_{SS}
    U_B = 1236 # V_{SS}

    T["dU_E"] = g(U_E)
    T["dU_B"] = g(U_B)
    T["spannungsverstaerkung"] = g(U_E/U_B)

def subsection3(T):
    data = np.genfromtxt("Halbwertszeiten.txt")

    resistances = data[:, 1:] / np.log(2)
    capacity = data[:, 0].transpose()
    print(capacity)
    print()
    print(resistances)
    print()
    resistances = (resistances.T / capacity).T
    print(resistances)

    T["halbwertszeiten"] = data
    T["widerstaende"] = np.column_stack([capacity, resistances])

def g(value, error=None, digits=3):
    if error is None:
        return ("{:."+str(digits)+"g}").format(value)
    else:
        value_log = int(math.floor(math.log(np.abs(value), 10)))
        error_log = int(math.floor(math.log(np.abs(error), 10)))

        difference = value_log - error_log
        exp = 0

        if difference >= 0:
            value_dis = value * 10**(difference - value_log)
            error_dis = error * 10**(- error_log)
            exp = error_log
        else:
            value_dis = value * 10**(- value_log)
            error_dis = error * 10**(difference - error_log)
            exp = value_log

        format_string = "{:."+str(digits-1)+"f} +- {:."+str(digits-1)+"f} e{:+d}"
        return format_string.format(value_dis, error_dis, exp)

def render_template(T):
    # Setting up Jinja
    env = jinja2.Environment(
        "%<", ">%",
        "<<", ">>",
        "%§", "§%",
        loader=jinja2.FileSystemLoader(".")
    )
    template3 = env.get_template("Template_3.tex")

    # Rendering LaTeX document with values.
    with open("physik313-3-Ueding_Lemmer.tex", "w") as f:
        f.write(template3.render(**T))

def main():
    T = {}

    subsection1(T)
    subsection2(T)
    subsection3(T)

    render_template(T)

if __name__ == "__main__":
    main()
